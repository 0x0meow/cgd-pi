# CoreGeek Displays Signage Player - Docker Compose Configuration
# Reference: docs/server-api-events.md section 8.6
#
# Deploy on Raspberry Pi with:
#   docker compose pull
#   docker compose up -d

services:
  signage:
    # Replace with your registry path after building:
    # docker buildx build --platform linux/arm64 -t ghcr.io/<org>/coregeek-signage:latest --push .
    image: coregeek-signage:latest
    
    container_name: coregeek-signage
    
    # Use host networking so Chromium on the host can access localhost:3000
    # This avoids network complexity in kiosk deployments
    network_mode: host
    
    # Always restart unless explicitly stopped (production resilience)
    restart: unless-stopped
    
    # Load environment configuration from .env file (section 8.5)
    env_file:
      - .env
    
    # Optional: Mount logs for debugging (section 8.8)
    volumes:
      - ./logs:/var/log/signage
    
    # Resource limits (adjust based on Pi model)
    # Pi 4 with 4GB: 512MB should be sufficient
    # Pi 5 with 8GB: can increase if running multiple services
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/healthz', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
